name: 'Test Action'

on:
  push:

jobs:
  create-cache:
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Checkout Repository 🛎️'
        uses: 'actions/checkout@v3'
      - name: 'Use Node.js 📗'
        uses: 'actions/setup-node@v3'
        with:
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      - name: 'Delete pre-existing test cache 🔥'
        run: |-
          gh extension install actions/gh-actions-cache
          gh actions-cache delete "test" \
            -R ${{ github.repository }} -B ${{ github.ref_name }} \
            --confirm

      - name: 'Ensure node_modules does not exist ✅'
        run: |-
          dir="$(pwd)/node_modules"
          if [ ! -f "$dir/.package-lock.json" ]; then
            echo "✅ $dir does not exist."
          else
            echo "❌ $dir already exists."
            echo "Contents of $dir:"
            ls -lha "$dir"
            exit 1
          fi

      - name: 'Install node modules 📥'
        id: 'install'
        uses: './'
        with:
          cache-key: 'test'

      - name: 'Ensure node_modules exists ✅'
        run: |-
          dir="$(pwd)/node_modules"
          if [ -d "$dir" ]; then
            echo "✅ $dir exists."
          else
            echo "❌ $dir does not exist."
            dir_up=$(dirname $dir)
            echo "Contents of $dir_up:"
            ls -lha "$dir_up"
            exit 1
          fi

  test-cache:
    runs-on: 'ubuntu-latest'
    needs:
      - 'create-cache'
    steps:
      - name: 'Restore test cache 🧩'
        uses: 'actions/cache/restore@v3'
        id: 'restore-cache'
        with:
          key: '${{ steps.install.outputs.cache-key }}'
          path: '${{ runner.temp }}/cache-${{ steps.install.outputs.cache-key }}'
          fail-on-cache-miss: 'true'

      - name: 'Ensure cache includes node_modules ✅'
        run: |-
          dir="${{ runner.temp }}/cache-${{ steps.install.outputs.cache-key }}"
          pkg_lock="$dir/.package-lock.json"
          if [ -f "$pkg_lock" ]; then
            echo "✅ $pkg_lock exists."
          else
            echo "❌ $pkg_lock does not exist."
            echo "Contents of $dir:"
            ls -lha "$dir"
            exit 1
          fi

  cleanup:
    runs-on: 'ubuntu-latest'
    needs:
      - 'create-cache'
      - 'test-cache'
    if: 'always()'
    steps:
      - name: 'Delete test cache 🔥'
        run: |-
          gh extension install actions/gh-actions-cache
          gh actions-cache delete "test" \
            -R ${{ github.repository }} -B ${{ github.ref_name }} \
            --confirm
